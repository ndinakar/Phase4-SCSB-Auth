buildscript {
	ext {
		springBootVersion = '2.7.15'
		set('springCloudVersion', "2021.0.8")
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'org.springframework.boot' version '2.7.15'
	id 'io.spring.dependency-management' version '1.1.3'
	id "org.sonarqube" version "4.3.1.3277"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'

//added to accept systemproperties while executing gradlew test cmd
test {
	systemProperties = System.properties
}


jar {
	archiveBaseName = 'scsb-auth'
	archiveVersion = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.17
targetCompatibility = 1.17

repositories {
	mavenCentral()
}


dependencies {
	implementation fileTree(dir: '/data/commonjar', include: '*2.5.jar')
	implementation('commons-beanutils:commons-beanutils:1.9.4')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
	implementation('org.springframework.boot:spring-boot-starter-web-services')
	implementation('org.springframework.data:spring-data-solr:4.3.15')
			{exclude module: 'solr-solrj'; exclude module: 'solr-data-commons'; exclude module: 'spring-data-jpa'}
	implementation('org.codehaus.jettison:jettison:1.5.3')
	implementation('org.springframework.data:spring-data-commons')
	implementation('org.springframework.data:spring-data-jpa')
	implementation('info.freelibrary:freelib-marc4j:2.6.12')
	implementation(group: 'net.sourceforge.javacsv', name: 'javacsv', version: '2.0')
	implementation('org.apache.shiro:shiro-core:1.8.0')
	implementation('org.apache.shiro:shiro-spring:1.8.0')
	implementation('org.apache.shiro:shiro-spring-boot-web-starter:1.8.0')
	implementation('org.projectlombok:lombok:1.18.28')
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	implementation 'net.logstash.logback:logstash-logback-encoder:7.3'
	annotationProcessor('org.projectlombok:lombok:1.18.28')
	testImplementation('org.projectlombok:lombok:1.18.28')
	testAnnotationProcessor('org.projectlombok:lombok:1.18.28')

	implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.32'

	testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.5.0'
	testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
	testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'


	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
	implementation group: 'org.json', name: 'json', version: '20240205'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
	testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.7.15'

    implementation('io.springfox:springfox-boot-starter:3.0.0')
}

configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == 'org.apache.logging.log4j') {
			details.useVersion '3.0.0-alpha1'
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}


jacoco {
	toolVersion = "0.8.10"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

task scsbShiroJavadocs(type: Javadoc) {
	source = sourceSets.main.java
	classpath = configurations.implementation
	options.addStringOption('Xdoclint:none', '-quiet')
	String home = System.getProperty("user.home");
	destinationDir =  new File(home+"/scsb-javadocs/scsb-shiro");
}

/* bootJar {
	layered()
} */

jar {
	enabled = false
	archiveClassifier = '' //use empty string
}
